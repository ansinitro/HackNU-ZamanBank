from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.security import HTTPBearer
from pydantic import BaseModel
from sqlalchemy import select
from routes import auth_routes, user_routes, financial_aim_routes, transaction, financial_transaction, chat_routes
from typing import List, Optional
import requests
from database import Base, engine, get_db
from models import FinancialAim
import os
from datetime import datetime
from fastapi import UploadFile, File
from sqlalchemy.ext.asyncio import AsyncSession
from routes.user_routes import get_current_user
from chat import get_or_create_chat_session

app = FastAPI(title="Zaman Bank AI Assistant", version="1.0.0")
app.include_router(auth_routes.router)
app.include_router(user_routes.router)
app.include_router(financial_aim_routes.router)
app.include_router(transaction.router)
app.include_router(financial_transaction.router)
app.include_router(chat_routes.router)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configuration
X_LITELLM_API_KEY = "sk-roG3OusRr0TLCHAADks6lw"
# API_KEY = "sk-1234"
BASE_URL = "https://openai-hub.neuraldeep.tech"
security = HTTPBearer()


# Pydantic models
class ChatMessage(BaseModel):
    message: str
    session_id: Optional[str] = None


class FinancialGoal(BaseModel):
    goal_name: str
    target_amount: float
    current_amount: float = 0
    timeline_months: int
    goal_type: str  # apartment, education, purchase, travel, operation

class UserProfile(BaseModel):
    monthly_income: float
    monthly_expenses: float
    savings: float
    financial_goals: List[FinancialGoal] = []

class ProductRecommendationRequest(BaseModel):
    user_profile: UserProfile
    goal_type: str

# Bank products data (simplified)
BANK_PRODUCTS = {
    "deposits": [
        {
            "name": "–î–µ–ø–æ–∑–∏—Ç—ã",
            "rate": "–¥–æ 20%",
            "min_amount": 0,
            "term": "–ë–µ–∑ —Å—Ä–æ–∫–∞",
            "description": "–ù–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π –ø–æ –∏—Å–ª–∞–º—Å–∫–∏–º –ø—Ä–∏–Ω—Ü–∏–ø–∞–º",
            "image": "https://zamanbank.kz/storage/app/media/maing2m/deposit_p%402x.png",
            "link": "https://zamanbank.kz/ru/personal/agentskij-depozit-vakala"
        }
    ],
    "credits": [
        {
            "name": "–§–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "rate": "–¥–æ 3 –º–ª–Ω ‚Ç∏",
            "min_amount": 0,
            "term": "–ë–µ–∑ –∑–∞–ª–æ–≥–∞",
            "description": "–û–¥–æ–±—Ä–µ–Ω–æ –®–∞—Ä–∏–∞—Ç—Å–∫–∏–º –°–æ–≤–µ—Ç–æ–º",
            "image": "https://zamanbank.kz/storage/app/media/mai    ng2m/pic-tw-02.png",
            "link": "https://zamanbank.kz/ru/personal/onlajn-finansirovanie-bez-zaloga"
        }
    ],
    "transfers": [
        {
            "name": "–ü–µ—Ä–µ–≤–æ–¥—ã –±–µ–∑ –∫–æ–º–∏—Å—Å–∏–∏",
            "description": "–í –ª—é–±—ã–µ –±–∞–Ω–∫–∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–∏",
            "image": "https://zamanbank.kz/storage/app/media/maing2m/pic-tw-04.png",
            "link": "https://zaman.onelink.me/OAIU/4eqyn2hq"
        }
    ],
    "islamic": [
        {
            "name": "–ú—É—Ä–∞–±–∞—Ö–∞",
            "type": "–¢–æ—Ä–≥–æ–≤–∞—è –º–∞—Ä–∂–∞",
            "description": "–ü–æ–∫—É–ø–∫–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ —Ç–æ–≤–∞—Ä–∞ —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–π –Ω–∞—Ü–µ–Ω–∫–æ–π"
        },
        {
            "name": "–ò–¥–∂–∞—Ä–∞",
            "type": "–ê—Ä–µ–Ω–¥–∞",
            "description": "–ê—Ä–µ–Ω–¥–∞ –∏–º—É—â–µ—Å—Ç–≤–∞ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º –≤—ã–∫—É–ø–æ–º"
        }
    ]
}

@app.on_event("startup")
async def startup():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

@app.get("/")
async def root():
    return {"message": "Zaman Bank AI Assistant API"}


@app.post("/api/chat")
async def chat_with_assistant(
    chat_message: ChatMessage,
    db: AsyncSession = Depends(get_db),
    current_user=Depends(get_current_user)
):
    """
    Multi-stage financial assistant:
    1Ô∏è‚É£ Goal Discovery
    2Ô∏è‚É£ Clarification
    3Ô∏è‚É£ Recommendation
    4Ô∏è‚É£ Confirmation (NEW!)
    5Ô∏è‚É£ Call to Action
    """
    session_id = chat_message.session_id or generate_session_id()
    user_session = await get_or_create_chat_session(db, current_user.id, session_id)

    stage = user_session.stage or "discovery"

    # –ü—Ä–æ–º–ø—Ç—ã –ø–æ —Å—Ç–∞–¥–∏—è–º
    prompts = {
        "discovery": """
        You are a friendly financial planner.
        Ask open-ended questions to understand what financial goals the user has
        (e.g., buy a car, save for Hajj, start a business).
        Keep the tone personal and conversational.
        Return JSON only:
        {
          "response": "your message to the user",
          "intent": "next_stage_when_ready_or_none",
          "goal_type": "string or null"
        }
        """,
        "clarification": """
        You are an assistant helping calculate goal feasibility.
        Ask for approximate cost, current savings, and preferred timeline.
        Then summarize their target.
        Return JSON only:
        {
          "response": "your message",
          "intent": "next_stage_when_ready_or_none",
          "goal_cost": "float or null",
          "monthly_saving": "float or null",
          "timeline": "string or null"
        }
        """,
        "recommendation": """
        You are an expert financial advisor from Zaman Bank.
        Based on user info, recommend relevant bank products
        (deposits, financing, halal programs, cards)
        and explain why each helps reach the goal.
        Be realistic and Shariah-compliant.
        Return JSON only:
        {
          "response": "your recommendations text",
          "intent": "next_stage_when_ready_or_none",
          "products": ["list", "of", "products"]
        }
        """,
        "confirmation": """
        You are a helpful assistant confirming the user's choice.
        The user has expressed interest in specific products.
        Ask them to confirm if they want to create a financial goal with the selected product(s).
        Be clear and concise.
        Return JSON only:
        {
          "response": "your confirmation request message",
          "intent": "confirmed_or_declined_or_none",
          "selected_products": ["list", "of", "selected", "products"]
        }
        If user confirms (says yes, –¥–∞–≤–∞–π, —Ö–æ—Ä–æ—à–æ, —Å–æ–≥–ª–∞—Å–µ–Ω, etc.), set intent to "confirmed".
        If user declines, set intent to "declined".
        """,
        "action": """
        Now invite the user to explore these offers via clickable links
        (formatted JSON for frontend rendering). Keep it concise and motivating.
        Return JSON only:
        {
          "response": "your final message",
          "cta": [{"label": "string", "url": "string"}]
        }
        """
    }

    system_prompt = prompts[stage]

    headers = {
        "x-litellm-api-key": f"{X_LITELLM_API_KEY}",
        "accept": "application/json",
        "Content-Type": "application/json"
    }

    data = {
        "model": "gpt-4o-mini",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": chat_message.message}
        ],
        "temperature": 0.4,
        "response_format": {"type": "json_object"}
    }

    response = requests.post(
        f"{BASE_URL}/chat/completions",
        headers=headers,
        json=data,
        timeout=30
    )

    if response.status_code != 200:
        raise HTTPException(status_code=500, detail=f"AI service error: {response.text}")

    result = response.json()
    content = result["choices"][0]["message"]["content"]

    import json
    try:
        ai_result = json.loads(content)
    except json.JSONDecodeError:
        return {"response": content, "session_id": session_id}

    ai_response = ai_result.get("response", "")
    intent = ai_result.get("intent")

    # ‚è© –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Ç–∞–¥–∏—è–º
    if stage == "discovery" and intent == "next_stage_when_ready_or_none":
        user_session.stage = "clarification"
    elif stage == "clarification" and intent == "next_stage_when_ready_or_none":
        user_session.stage = "recommendation"
    elif stage == "recommendation" and intent == "next_stage_when_ready_or_none":
        user_session.stage = "confirmation"
    elif stage == "confirmation":
        if intent == "confirmed":
            user_session.stage = "action"
        elif intent == "declined":
            # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å
            user_session.stage = "recommendation"
            ai_response += "\n\n–î–∞–≤–∞–π—Ç–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã."
    elif stage == "action":
        user_session.stage = "complete"

    # üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (—Ü–µ–ª—å, —Å—É–º–º–∞, –∏ —Ç.–¥.)
    for key in ["goal_type", "goal_cost", "monthly_saving", "timeline", "products", "selected_products"]:
        if key in ai_result and ai_result[key] is not None:
            setattr(user_session, key, ai_result[key])

    await db.commit()

    # ‚úÖ –°–æ–∑–¥–∞—ë–º —Ü–µ–ª—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —Å—Ç–∞–¥–∏–∏ action
    if user_session.stage == "complete":
        new_aim = FinancialAim(
            user_id=current_user.id,
            title=user_session.goal_type or "–ú–æ—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Ü–µ–ª—å",
            target_amount=float(user_session.goal_cost or 0),
            current_amount=0.0,
        )
        db.add(new_aim)
        await db.commit()
        ai_response += f"\n\n‚úÖ –¶–µ–ª—å '{new_aim.title}' —Å–æ–∑–¥–∞–Ω–∞. –°—É–º–º–∞: {new_aim.target_amount:,.0f} ‚Ç∏"

    return {
        "response": ai_response,
        "stage": user_session.stage,
        "session_id": session_id
    }

@app.post("/api/speech-to-text")
async def speech_to_text(audio_file: UploadFile = File(...)):
    try:
        # Read the file content
        audio_bytes = await audio_file.read()

        headers = {
            "x-litellm-api-key": f"{X_LITELLM_API_KEY}",
        }

        files = {
            "file": (audio_file.filename or "audio.wav", audio_bytes, "audio/wav"),
            "model": (None, "whisper-1")
        }

        response = requests.post(
            f"{BASE_URL}/v1/audio/transcriptions",
            headers=headers,
            files=files
        )
        print(response.json())
        if response.status_code == 200:
            result = response.json()
            return {"text": result["text"]}
        else:
            raise HTTPException(status_code=500, detail="Speech recognition error")

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
@app.post("/api/calculate-goal")
async def calculate_financial_goal(goal: FinancialGoal):
    try:
        monthly_saving = (goal.target_amount - goal.current_amount) / goal.timeline_months
        progress_percentage = (goal.current_amount / goal.target_amount) * 100
        
        return {
            "monthly_saving": round(monthly_saving, 2),
            "progress_percentage": round(progress_percentage, 2),
            "timeline_months": goal.timeline_months,
            "recommendations": generate_saving_recommendations(goal)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.post("/api/recommend-products")
async def recommend_products(request: ProductRecommendationRequest):
    try:
        user_profile = request.user_profile
        goal_type = request.goal_type
        
        recommendations = []
        
        # Logic for product recommendations based on goal type and user profile
        if goal_type == "apartment":
            recommendations.extend([
                product for product in BANK_PRODUCTS["credits"] 
                if product["name"] == "–ò–ø–æ—Ç–µ—á–Ω—ã–π –∫—Ä–µ–¥–∏—Ç"
            ])
            recommendations.extend(BANK_PRODUCTS["deposits"][:1])
            
        elif goal_type == "education":
            recommendations.extend([
                product for product in BANK_PRODUCTS["credits"] 
                if "–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å—Å–∫–∏–π" in product["name"]
            ])
            recommendations.extend(BANK_PRODUCTS["deposits"])
            
        # Add Islamic finance options
        recommendations.extend(BANK_PRODUCTS["islamic"][:1])
        
        return {
            "recommendations": recommendations,
            "financial_advice": generate_financial_advice(user_profile, goal_type)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@app.get("/api/stress-relief-tips")
async def get_stress_relief_tips():
    tips = [
        "–ì–ª—É–±–æ–∫–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: 5 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å",
        "–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –≤–º–µ—Å—Ç–æ —à–æ–ø–∏–Ω–≥–∞",
        "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ —Ö–æ–±–±–∏",
        "–í–µ–¥–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–∏–∫–∞ –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏",
        "–§–∏–∑–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–æ–º–∞",
        "–ß—Ç–µ–Ω–∏–µ –∫–Ω–∏–≥ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏",
        "–í—Å—Ç—Ä–µ—á–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ"
    ]
    return {"tips": tips}

def generate_session_id():
    return f"session_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{os.urandom(4).hex()}"

def generate_saving_recommendations(goal: FinancialGoal):
    recommendations = []
    
    if goal.goal_type == "apartment":
        recommendations = [
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ø–æ—Ç–µ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –±–∞–Ω–∫–∞",
            "–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ 20% –æ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç –¥–ª—è –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–∑–Ω–æ—Å–∞"
        ]
    elif goal.goal_type == "travel":
        recommendations = [
            "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –ª—É—á—à–∏—Ö —Ü–µ–Ω",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—ç—à–±—ç–∫-–ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ travel-–≤–∫–ª–∞–¥—ã –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π"
        ]
    
    return recommendations

def generate_financial_advice(user_profile: UserProfile, goal_type: str):
    savings_ratio = user_profile.savings / user_profile.monthly_income if user_profile.monthly_income > 0 else 0
    
    advice = []
    
    if savings_ratio < 3:
        advice.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –ø–æ–¥—É—à–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ 3-6 –º–µ—Å—è—Ü–µ–≤")
    
    if user_profile.monthly_expenses / user_profile.monthly_income > 0.6:
        advice.append("–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤")
    
    return advice

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)